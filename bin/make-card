#!/usr/bin/env ruby
require 'netrc'
require 'octokit'
require 'optparse'
require 'psych'
require 'trello'

class CardMaker
  CARD_URL_PATTERN = %r{https://trello.com/c/(\w+)}

  def self.card_url_for_issue(issue)
    CARD_URL_PATTERN.match(issue.body) { |m| m[0] }
  end

  attr_accessor :github_repository_name
  attr_accessor :trello_board_id
  attr_accessor :trello_list_name
  attr_accessor :trello_list_number

  attr_accessor :trello_client
  attr_accessor :github_client

  def valid?
    if github_repository_name.nil?
      puts "No GitHub repository name set!"
      return false
    end
    if trello_board_id.nil?
      puts "No Trello board ID set!"
      return false
    end
    if trello_list_name && trello_list_number
      puts "Can't specify a list name AND a list number!"
      return false
    end
    return true
  end

  def trello_board
    @trello_board ||= trello_client.find(:board, trello_board_id)
  end

  # If no list name is specified, defaults to the first list.
  def trello_list
    @trello_list ||= begin
      if trello_list_number
        trello_board.lists[trello_list_number - 1]
      elsif trello_list_name
        trello_board.lists.find { |l| l.name == trello_list_name }
      else
        trello_board.lists.first
      end
    end
  end

  def find_issue(number)
    github_client.issue(github_repository_name, number)
  end

  def make_card_for_issue(issue)
    puts "making card for ##{issue.number}: #{issue.title}"

    # TODO: fork ruby-trello, fix client.create(:card, ...)
    card = Trello::Card.new
    card.client = trello_client
    card.list_id = trello_list.id
    card.name = issue.title
    card.desc = issue.body
    card.pos = 'bottom'
    card.save

    card.add_attachment(issue.html_url)

    puts "=> card created: #{card.short_url}"

    new_body = issue.body + "\n\nCard: #{card.short_url}"
    github_client.update_issue(github_repository_name, issue.number, body: new_body)
    puts "=> issue description updated"
  end
end

class Aliases
  def initialize
    aliases = Psych.load_file('aliases.yml')
    @boards = aliases['boards'] || Hash.new
    @repos = aliases['repos'] || Hash.new
  rescue Errno::ENOENT
    @boards = Hash.new
    @repos = Hash.new
  end

  def resolve_board(token)
    @boards[token] || token
  end

  def resolve_repo(token)
    @repos[token] || token
  end
end

ALIASES = Aliases.new

card_maker = CardMaker.new

OptionParser.new do |opts|
  opts.banner = "Usage: make-card -b BOARD -l LIST -r REPO NUMBER, NUMBER, ..."

  opts.on('-r', '--repository REPOSITORY', 'GitHub repository') do |repo|
    card_maker.github_repository_name = ALIASES.resolve_repo(repo)
  end

  opts.on('-b', '--board ID', 'Trello board identifier') do |board|
    card_maker.trello_board_id = ALIASES.resolve_board(board)
  end

  opts.on('-l', '--list NAME', 'Trello list name') do |list|
    card_maker.trello_list_name = list
  end

  opts.on('-i', '--index NUMBER', Integer, 'Trello list number') do |index|
    card_maker.trello_list_number = index
  end
end.parse!

exit(1) unless card_maker.valid?

# TODO: print instructions if auth info is missing

n2 = Netrc.read
trello_api_key, trello_member_token = n2['trello.com']

if trello_member_token.nil?
  puts "Go to this URL, generate a token, save it in ~/.netrc"
  puts "https://trello.com/1/authorize?key=#{trello_api_key}&response_type=token&expiration=never&scope=read,write"
  exit
end

card_maker.trello_client = Trello::Client.new(
  developer_public_key: trello_api_key,
  member_token: trello_member_token
)

card_maker.github_client = Octokit::Client.new(:netrc => true)

if ARGV.empty?
  puts "Nothing to do! (Try specifying some issue numbers.)"
  exit 1
end

ARGV.each do |issue_number|
  issue = card_maker.find_issue(issue_number)

  if card_url = CardMaker.card_url_for_issue(issue)
    puts "issue ##{issue.number} already has card at #{card_url}"
  else
    card_maker.make_card_for_issue(issue)
  end
end
