#!/usr/bin/env ruby
require 'netrc'
require 'octokit'
require 'optparse'
require 'trello'

Options = Struct.new(:repo, :issue_numbers, :board_id, :list_name)

options = Options.new(nil, Array.new, nil, nil)

OptionParser.new do |opts|
  opts.banner = "Usage: make-card -b BOARD -l LIST -r REPO NUMBER, NUMBER, ..."

  opts.on('-r', '--repository REPOSITORY', 'GitHub repository') do |repo|
    options.repo = repo
  end

  opts.on('-b', '--board ID', 'Trello board identifier') do |board_id|
    options.board_id = board_id
  end

  opts.on('-l', '--list NAME', 'Trello list name') do |name|
    options.list_name = name
  end
end.parse!

options.issue_numbers = ARGV

# TODO: print instructions if auth info is missing

n2 = Netrc.read
trello_api_key, trello_member_token = n2['trello.com']

if trello_member_token.nil?
  puts "Go to this URL, generate a token, save it in ~/.netrc"
  puts "https://trello.com/1/authorize?key=#{trello_api_key}&response_type=token&expiration=never&scope=read,write"
  exit
end

trello = Trello::Client.new(
  developer_public_key: trello_api_key,
  member_token: trello_member_token
)

github = Octokit::Client.new(:netrc => true)

# find board by ID
board = trello.find(:board, options.board_id)

# find list by name
list = board.lists.find { |l| l.name == options.list_name }

options.issue_numbers.each do |issue_number|
  issue = github.issue(options.repo, issue_number)

  puts "making card for ##{issue.number}: #{issue.title}"

  # TODO: fork ruby-trello, fix client.create(:card, ...)
  card = Trello::Card.new
  card.client = trello
  card.list_id = list.id
  card.name = issue.title
  card.desc = issue.body
  card.pos = 'bottom'
  card.save

  card.add_attachment(issue.html_url)

  puts "=> #{card.short_url}"

  # TODO: Put link in description; don't create card if a link is already
  # in description
  issue_comment_text = "[Trello Card](#{card.short_url})"
  github.add_comment options.repo, issue_number, issue_comment_text
end
